# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-08-29 23:05
from __future__ import unicode_literals

import autoslug.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import med_social.libs.mixins
import projects.models
import storages.backends.s3boto
import taggit.managers


def populate_created_by(apps, schema_editor):
    proposed_resource = apps.get_model("projects", "ProposedResource")
    for resource in proposed_resource.objects.all():
        resource.created_by = resource.changed_by
        resource.save()


def migrate_to_temp_vendors(apps, schema_editor):
    SR = apps.get_model('projects', 'StaffingRequest')
    RVR = apps.get_model('projects', 'RequestVendorRelationship')
    for sr in SR.objects.all():
        for vendor in sr.vendors.all():
            RVR.objects.get_or_create(vendor=vendor, request=sr, defaults={
                'created_by': sr.created_by
            })


def set_division_on_projects(apps, schema_editor):
    Project = apps.get_model("projects", "Project")
    Division = apps.get_model("divisions", "Division")

    if Division.objects.exists():
        division = Division.objects.all()[0]
    else:
        division = Division.objects.create(name='Main Group')

    Project.objects.filter(division=None).update(division=division)


def nothing(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    # replaces = [(b'projects', '0002_project_tags'), (b'projects', '0003_auto_20141002_1316'), (b'projects', '0004_auto_20141004_2054'), (b'projects', '0005_proposedresource_created_by'), (b'projects', '0006_auto_20141007_0557'), (b'projects', '0007_auto_20141007_0708'), (b'projects', '0008_auto_20141103_1821'), (b'projects', '0010_auto_20141111_1136'), (b'projects', '0011_auto_20141112_0718'), (b'projects', '0012_auto_20141112_0719'), (b'projects', '0013_remove_staffingrequest_vendors'), (b'projects', '0014_auto_20141112_0824'), (b'projects', '0015_requestvendorrelationship_comment'), (b'projects', '0016_auto_20141114_1715'), (b'projects', '0017_auto_20141127_1243'), (b'projects', '0018_auto_20141205_0404'), (b'projects', '0019_auto_20141223_0807'), (b'projects', '0020_auto_20150107_1013'), (b'projects', '0021_auto_20150127_0306'), (b'projects', '0022_auto_20150129_2020'), (b'projects', '0023_auto_20150206_0658'), (b'projects', '0024_auto_20150207_0846'), (b'projects', '0025_auto_20150207_0858'), (b'projects', '0026_auto_20150305_0840'), (b'projects', '0027_staffingrequest_last_activity'), (b'projects', '0028_auto_20150316_0844'), (b'projects', '0029_auto_20160406_1016'), (b'projects', '0030_auto_20160412_0334'), (b'projects', '0031_auto_20160420_1306'), (b'projects', '0032_auto_20160421_1813'), (b'projects', '0033_auto_20160501_1317'), (b'projects', '0034_auto_20160509_1051'), (b'projects', '0035_auto_20160515_0602'), (b'projects', '0036_auto_20160515_1435'), (b'projects', '0037_auto_20160523_0744'), (b'projects', '0038_auto_20160524_1855'), (b'projects', '0039_auto_20160610_2125'), (b'projects', '0040_auto_20160615_2328')]

    dependencies = [
        ('taggit', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('projects', '0001_initial'),
        ('vendors', '0002_auto_20140829_1150'),
        ('vendors', '0007_auto_20141221_1842'),
        ('locations', '0002_auto_20141207_0757'),
        ('divisions', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.RemoveField(
            model_name='staffingrequest',
            name='owners',
        ),
        migrations.AddField(
            model_name='project',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name=b'owned_projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staffingrequest',
            name='owners',
            field=models.ManyToManyField(blank=True, related_name=b'owned_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='proposedresource',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name=b'created_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunPython(
            code=populate_created_by,
            reverse_code=nothing,
        ),
        migrations.AlterField(
            model_name='proposedresource',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'created_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staffingrequest',
            name='edit_step',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, b'Create'), (2, b'People'), (3, b'Vendors'), (4, b'Advanced')], default=1, null=True),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='description',
            field=models.TextField(blank=True, verbose_name='Job description'),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='is_public',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='RequestVendorRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.PositiveSmallIntegerField(blank=True, choices=[(1, b'accepted'), (2, b'rejected')], default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'request_vendors', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.StaffingRequest')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vendors.Vendor')),
            ],
        ),
        migrations.AddField(
            model_name='staffingrequest',
            name='temp_vendors',
            field=models.ManyToManyField(through='projects.RequestVendorRelationship', to=b'vendors.Vendor'),
        ),
        migrations.RunPython(
            code=migrate_to_temp_vendors,
            reverse_code=nothing,
        ),
        migrations.RemoveField(
            model_name='staffingrequest',
            name='vendors',
        ),
        migrations.RenameField(
            model_name='staffingrequest',
            old_name='temp_vendors',
            new_name='vendors',
        ),
        migrations.AlterField(
            model_name='requestvendorrelationship',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'request_vendors', to='projects.StaffingRequest'),
        ),
        migrations.AlterField(
            model_name='requestvendorrelationship',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'request_vendors', to='vendors.Vendor'),
        ),
        migrations.AddField(
            model_name='requestvendorrelationship',
            name='comment',
            field=models.CharField(blank=True, default=b'', max_length=127),
        ),
        migrations.AlterUniqueTogether(
            name='requestvendorrelationship',
            unique_together=set([('request', 'vendor')]),
        ),
        migrations.AlterField(
            model_name='proposedresource',
            name='end_date',
            field=models.DateField(null=True),
        ),
        migrations.AlterField(
            model_name='proposedresource',
            name='start_date',
            field=models.DateField(null=True),
        ),
        migrations.AlterField(
            model_name='proposedresource',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name=b'proposals', to='projects.Project'),
        ),
        migrations.AddField(
            model_name='project',
            name='division',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name=b'projects', to='divisions.Division'),
        ),
        migrations.CreateModel(
            name='DeliverableResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=0, max_digits=10, null=True)),
                ('allocation', models.PositiveSmallIntegerField(default=100, verbose_name='Allocation (%)')),
                ('is_accepted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('accepted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name=b'accepted_deliverable', to=settings.AUTH_USER_MODEL)),
                ('handlers', models.ManyToManyField(blank=True, related_name=b'handled_deliverables', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='locations.Location')),
                ('posted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'posted_deliverable', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'deliverable', to='projects.StaffingRequest')),
                ('vendor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name=b'deliverable', to='vendors.Vendor')),
            ],
            bases=(models.Model, med_social.libs.mixins.SerializableMixin),
        ),
        migrations.AddField(
            model_name='project',
            name='is_archived',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='staffingrequest',
            name='is_archived',
            field=models.BooleanField(default=False),
        ),
        migrations.RemoveField(
            model_name='staffingrequest',
            name='edit_step',
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ('end_date',), 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterField(
            model_name='proposedresource',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='roles.Role'),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='description',
            field=models.TextField(blank=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staffing_requests', to='roles.Role'),
        ),
        migrations.AlterField(
            model_name='staffingresponse',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staffing_responses', to='roles.Role'),
        ),
        migrations.AlterField(
            model_name='staffingresponse',
            name='status',
            field=models.PositiveSmallIntegerField(choices=[(1, b'draft'), (2, b'sent')], default=2),
        ),
        migrations.RunPython(
            code=set_division_on_projects,
            reverse_code=nothing,
        ),
        migrations.AlterField(
            model_name='project',
            name='division',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='divisions.Division'),
        ),
        migrations.AlterModelOptions(
            name='project',
            options={'ordering': ('status', '-modified'), 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterModelOptions(
            name='proposedresourcestatus',
            options={'ordering': ('-value',)},
        ),
        migrations.AddField(
            model_name='project',
            name='last_activity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modified_projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staffingrequest',
            name='last_activity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staffing_activity', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='requestvendorrelationship',
            name='answered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='request_vendor_answer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='requestvendorrelationship',
            name='viewed_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='requestvendorrelationship',
            name='viewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='request_vendor_view', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'dev-proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'dev-proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'dev-proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'dev-proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='proposedresourcestatus',
            name='slug',
            field=autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from=b'name', unique=True),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'dev-proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, storage=storages.backends.s3boto.S3BotoStorage(acl=b'private', bucket=b'proven-cc', querystring_auth=True, querystring_expire=600), upload_to=projects.models._get_document_upload_path),
        ),
        migrations.AlterField(
            model_name='staffingrequest',
            name='document',
            field=models.FileField(null=True, upload_to=projects.models._get_document_upload_path),
        ),
    ]
